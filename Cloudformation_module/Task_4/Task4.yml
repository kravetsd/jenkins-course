AWSTemplateFormatVersion: "2010-09-09"
Description: >-  
  >-  Develop a CloudFormation template called "web" that includes the following web stack components:
  >-  - internet-facing classic Elastic Load Balancer;
  >-  - Launch Configuration (EC2 instance must be based on Amazon Linux 2 AMI and have a User Data script that installs Apache/php and creates "index.php" script that displays hostname, tries to connect to the database, and indicates whether it succeeded);
  >-  - Auto Scaling group linked with the Elastic Load Balancer.
  >-
  >-  The template must have the following input parameters:
  >-  - subnet IDs;
  >-  - security group IDs for ELB;
  >-  - security group IDs for EC2 instances;
  >-  - EC2 instance class (a list of allowed values must be pre-defined, "t2.micro" being the default);
  >-  - minimum ASG instance count (a default value must be pre-defined);
  >-  - maximum ASG instance count (a default value must be pre-defined);
  >-  - EC2 key pair name;
  >-  - RDS endpoint address;
  >-  - database username;
  >-  - database password  (this value must not be visible when entered during stack creation).
  >-
  >-  The template must have a mapping to choose AMI image ID based on the AWS region.
  >-
  >-  The template must have the following outputs:
  >-  - ELB domain name.

Mappings: 
  RegionMap: 
    us-east-1: 
      "AmazonLinux1": "ami-0b898040803850657"
    us-west-1: 
      "AmazonLinux1": "ami-056ee704806822732"
    eu-west-1: 
      "AmazonLinux1": "ami-0bbc25e23a7640b9b"
    eu-central-1: 
      "AmazonLinux1": "ami-0cc293023f983ed53"
    ap-southeast-1: 
      "AmazonLinux1": "ami-01f7527546b557442"
    ap-northeast-1: 
      "AmazonLinux1": "ami-0c3fd0f5d33134a76"
    us-west-2: 
      "AmazonLinux1": "ami-082b5a644766e0e6f"


Parameters:
  MyElbSubnetIds: 
    Description: "IDs of subnets to place ELB instance in" 
    Type: List<AWS::EC2::Subnet::Id>

  MyElbSgIds:
    Description:  "IDs of ELB security groups"
    Type: List<AWS::EC2::SecurityGroup::Id>

  MyEc2SgIds:
    Description:  "IDs of EC2 security groups"
    Type: List<AWS::EC2::SecurityGroup::Id>


  MyEc2InstanceClass:
    Description: "EC2 instance class"
    Type: String
    Default: t2.micro
    AllowedValues: 
      - t2.micro
      - t2.medium
      - t2.small
      - t2.large    

  MyAsgInstanceMax:
    Description: 
    Type: Number
    Default: 2
    AllowedValues:
      - 1
      - 2

  MyAsgInstanceMin:
    Description: 
    Type: Number
    Default: 2
    AllowedValues:
      - 1
      - 2

  MyEc2KeyPair:
    Description: 
    Type: AWS::EC2::KeyPair::KeyName
    Default:

  MyRdsEndpointAddress:
    Description: "My RDS endpoint address" 
    Type: String


  MyRdsDatabaseUser:
    Description: "Database username"
    Type: String
  
  MyRdsDatabasePassword:
    Description: "Database password"
    Type: String
    NoEcho: true


Resources:

  MyLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: MyLaunchConfig
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AmazonLinux1]
      InstanceType: !Ref MyEc2InstanceClass
      KeyName: !Ref MyEc2KeyPair
      SecurityGroups: !Ref MyEc2SgIds
      UserData: 
        Fn::Base64: 
          !Join [
            "",
            [
              "#!/bin/bash\n",
              "yum -y install httpd php php-mysql\n",
              "cat << EOF > /var/www/html/index.php\n",
              "<?php\n",
              "\\$servername = \"",
              { "Ref": "MyRdsEndpointAddress" },
              "\";\n",
              "\\$username = \"",
              { "Ref": "MyRdsDatabaseUser" },
              "\";\n",
              "\\$password = \"",
              { "Ref": "MyRdsDatabasePassword" },
              "\";\n",
              "\\$hostname = gethostname();\n",
              "\\$conn = new mysqli(\\$servername, \\$username, \\$password);\n",
              "if (\\$conn->connect_error) {\n",
              "  die(\"\\$hostname: connection failed (\" . \\$conn->connect_error . \")\");\n",
              "}\n",
              "echo \"\\$hostname: successfully connected to \\$servername\";\n",
              "?>\n",
              "EOF\n",
              "systemctl start httpd\n",
              "systemctl enable httpd\n"
            ]
          ]

  MyAutoscalingGroup: 
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: Myasgmp2019
      LaunchConfigurationName: !Ref MyLaunchConfig
      LoadBalancerNames: !Ref MyElb
      MaxSize: 2
      MinSize: 2
      VPCZoneIdentifier: !Ref MyElbSubnetIds

  MyElb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups: !Ref MyElbSgIds
      Subnets: !Ref MyElbSubnetIds
      Listeners:
        - LoadBalancerPort: 80 
          InstancePort: 80
          Protocol: HTTP
          InstanceProtocol: HTTP
      HealthCheck:
        Target: HTTP:80/index.php
        HealthyThreshold: 2
        Interval: 5
        Timeout: 10
        UnhealthyThreshold: 3

Outputs:
  MyElbDomainNameOutput:
    Description: "Elb domain name"
    Value: !GetAtt MyElb.DNSName
